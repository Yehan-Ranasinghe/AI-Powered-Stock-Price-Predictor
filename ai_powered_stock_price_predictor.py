# -*- coding: utf-8 -*-
"""AI-Powered Stock Price Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_t_O88YXRYs-tVpb4uBhF6pttBsHOdl
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Step 1: Fetch Stock Data
def get_stock_data(ticker, period='1y'):
    stock = yf.Ticker(ticker)
    df = stock.history(period=period)
    return df

# Step 2: Preprocess Data
def prepare_data(df):
    df['Date'] = df.index
    df['Days'] = (df['Date'] - df['Date'].min()).dt.days  # Convert dates to numerical values
    return df[['Days', 'Close']]

# Step 3: Train the Model
def train_model(df):
    X = df[['Days']]
    y = df['Close']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)

    predictions = model.predict(X_test)
    print(f"MAE: {mean_absolute_error(y_test, predictions)}")
    print(f"MSE: {mean_squared_error(y_test, predictions)}")
    return model

# Step 4: Predict Future Prices
def predict_future(model, days_ahead=30):
    future_days = np.array([[df['Days'].max() + i] for i in range(1, days_ahead+1)])
    future_prices = model.predict(future_days)
    return future_days.flatten(), future_prices

# Step 5: Visualize Predictions
def plot_predictions(df, model):
    plt.figure(figsize=(10,5))
    sns.scatterplot(x=df['Days'], y=df['Close'], label='Actual Prices', color='blue')
    sns.lineplot(x=df['Days'], y=model.predict(df[['Days']]), label='Predicted Prices', color='red')
    plt.xlabel("Days")
    plt.ylabel("Stock Price")
    plt.title("Stock Price Prediction using Linear Regression")
    plt.legend()
    plt.show()

# Running the Program
ticker = 'AAPL'  # Change to any stock symbol
df = get_stock_data(ticker)
df = prepare_data(df)
model = train_model(df)
plot_predictions(df, model)

# Predict Future Stock Prices
future_days, future_prices = predict_future(model)
print("Future Predictions:")
for day, price in zip(future_days, future_prices):
    print(f"Day {day}: ${price:.2f}")

